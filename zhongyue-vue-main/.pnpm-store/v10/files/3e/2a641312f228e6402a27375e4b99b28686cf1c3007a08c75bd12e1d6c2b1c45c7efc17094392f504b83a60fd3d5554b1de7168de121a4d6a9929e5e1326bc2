"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleResize = exports.triggerResizeEvent = exports.updateEdgePointByAnchors = exports.recalcResizeInfo = void 0;
var Control_1 = require("../view/Control");
var lodash_es_1 = require("lodash-es");
var constant_1 = require("../constant");
/**
 * 计算 Control 拖动后，节点的高度信息
 * @param index
 * @param resizeInfo
 * @param pct
 * @param freezeWidth
 * @param freezeHeight
 */
var recalcResizeInfo = function (index, resizeInfo, pct, freezeWidth, freezeHeight) {
    if (pct === void 0) { pct = 1; }
    if (freezeWidth === void 0) { freezeWidth = false; }
    if (freezeHeight === void 0) { freezeHeight = false; }
    var nextResizeInfo = (0, lodash_es_1.cloneDeep)(resizeInfo);
    var deltaX = nextResizeInfo.deltaX, deltaY = nextResizeInfo.deltaY;
    var width = nextResizeInfo.width, height = nextResizeInfo.height, PCTResizeInfo = nextResizeInfo.PCTResizeInfo;
    if (PCTResizeInfo) {
        var sensitivity = 4; // 越低越灵敏
        var deltaScale = 0;
        var combineDelta = 0;
        switch (index) {
            case Control_1.ResizeControlIndex.LEFT_TOP:
                combineDelta = (deltaX * -1 - deltaY) / sensitivity;
                break;
            case Control_1.ResizeControlIndex.RIGHT_TOP:
                combineDelta = (deltaX - deltaY) / sensitivity;
                break;
            case Control_1.ResizeControlIndex.RIGHT_BOTTOM:
                combineDelta = (deltaX + deltaY) / sensitivity;
                break;
            case Control_1.ResizeControlIndex.LEFT_BOTTOM:
                combineDelta = (deltaX * -1 + deltaY) / sensitivity;
                break;
            default:
                break;
        }
        if (combineDelta !== 0) {
            deltaScale =
                Math.round((combineDelta / PCTResizeInfo.ResizeBasis.basisHeight) * 100000) / 1000;
        }
        PCTResizeInfo.ResizePCT.widthPCT = Math.max(Math.min(PCTResizeInfo.ResizePCT.widthPCT + deltaScale, PCTResizeInfo.ScaleLimit.maxScaleLimit), PCTResizeInfo.ScaleLimit.minScaleLimit);
        PCTResizeInfo.ResizePCT.heightPCT = Math.max(Math.min(PCTResizeInfo.ResizePCT.heightPCT + deltaScale, PCTResizeInfo.ScaleLimit.maxScaleLimit), PCTResizeInfo.ScaleLimit.minScaleLimit);
        var spcWidth = Math.round((PCTResizeInfo.ResizePCT.widthPCT *
            PCTResizeInfo.ResizeBasis.basisWidth) /
            100);
        var spcHeight = Math.round((PCTResizeInfo.ResizePCT.heightPCT *
            PCTResizeInfo.ResizeBasis.basisHeight) /
            100);
        switch (index) {
            case Control_1.ResizeControlIndex.LEFT_TOP:
                deltaX = width - spcWidth;
                deltaY = height - spcHeight;
                break;
            case Control_1.ResizeControlIndex.RIGHT_TOP:
                deltaX = spcWidth - width;
                deltaY = height - spcHeight;
                break;
            case Control_1.ResizeControlIndex.RIGHT_BOTTOM:
                deltaX = spcWidth - width;
                deltaY = spcHeight - height;
                break;
            case Control_1.ResizeControlIndex.LEFT_BOTTOM:
                deltaX = width - spcWidth;
                deltaY = spcHeight - height;
                break;
            default:
                break;
        }
        return nextResizeInfo;
    }
    // 如果限制了宽/高不变，对应的 width/height 保持一致
    switch (index) {
        case Control_1.ResizeControlIndex.LEFT_TOP:
            nextResizeInfo.width = freezeWidth ? width : width - deltaX * pct;
            nextResizeInfo.height = freezeHeight ? height : height - deltaY * pct;
            break;
        case Control_1.ResizeControlIndex.RIGHT_TOP:
            nextResizeInfo.width = freezeWidth ? width : width + deltaX * pct;
            nextResizeInfo.height = freezeHeight ? height : height - deltaY * pct;
            break;
        case Control_1.ResizeControlIndex.RIGHT_BOTTOM:
            nextResizeInfo.width = freezeWidth ? width : width + deltaX * pct;
            nextResizeInfo.height = freezeHeight ? height : height + deltaY * pct;
            break;
        case Control_1.ResizeControlIndex.LEFT_BOTTOM:
            nextResizeInfo.width = freezeWidth ? width : width - deltaX * pct;
            nextResizeInfo.height = freezeHeight ? height : height + deltaY * pct;
            break;
        default:
            break;
    }
    return nextResizeInfo;
};
exports.recalcResizeInfo = recalcResizeInfo;
var updateEdgePointByAnchors = function (nodeModel, graphModel) {
    // https://github.com/didi/LogicFlow/issues/807
    // https://github.com/didi/LogicFlow/issues/875
    // 之前的做法，比如Rect是使用getRectResizeEdgePoint()计算边的point缩放后的位置
    // getRectResizeEdgePoint()考虑了瞄点在四条边以及在4个圆角的情况
    // 使用的是一种等比例缩放的模式，比如：
    // const pct = (y - beforeNode.y) / (beforeNode.height / 2 - radius)
    // afterPoint.y = afterNode.y + (afterNode.height / 2 - radius) * pct
    // 但是用户自定义的getDefaultAnchor()不一定是按照比例编写的
    // 它可能是 x: x + 20：每次缩放都会保持在x右边20的位置，因此用户自定义瞄点时，然后产生无法跟随的问题
    // 现在的做法是：直接获取用户自定义瞄点的位置，然后用这个位置作为边的新的起点，而不是自己进行计算
    var id = nodeModel.id, anchors = nodeModel.anchors;
    var edges = graphModel.getNodeEdges(id);
    // 更新边
    (0, lodash_es_1.forEach)(edges, function (edge) {
        if (edge.sourceNodeId === id) {
            // 边是以该节点为 sourceNode 时
            var anchorItem = (0, lodash_es_1.find)(anchors, function (anchor) { return anchor.id === edge.sourceAnchorId; });
            if (anchorItem) {
                edge.updateStartPoint({
                    x: anchorItem.x,
                    y: anchorItem.y,
                });
            }
        }
        else if (edge.targetNodeId === id) {
            // 边是以该节点为 targetNode 时
            var anchorItem = (0, lodash_es_1.find)(anchors, function (anchor) { return anchor.id === edge.targetAnchorId; });
            if (anchorItem) {
                edge.updateEndPoint({
                    x: anchorItem.x,
                    y: anchorItem.y,
                });
            }
        }
    });
};
exports.updateEdgePointByAnchors = updateEdgePointByAnchors;
var triggerResizeEvent = function (preNodeData, curNodeData, deltaX, deltaY, index, nodeModel, graphModel) {
    graphModel.eventCenter.emit(constant_1.EventType.NODE_RESIZE, {
        preData: preNodeData,
        data: curNodeData,
        deltaX: deltaX,
        deltaY: deltaY,
        index: index,
        model: nodeModel,
    });
};
exports.triggerResizeEvent = triggerResizeEvent;
// TODO：确认 handleResize 函数的类型定义
// export type IHandleResizeParams = {
//   deltaX: number
//   deltaY: number
//   index: ResizeControlIndex
//   nodeModel: BaseNodeModel
//   graphModel: GraphModel
//   cancelCallback?: () => void
// }
/**
 * 处理节点的 resize 事件，提出来放到 utils 中，方便在外面（extension）中使用
 * @param deltaX
 * @param deltaY
 * @param index
 * @param nodeModel
 * @param graphModel
 * @param cancelCallback
 */
var handleResize = function (_a) {
    var deltaX = _a.deltaX, deltaY = _a.deltaY, index = _a.index, nodeModel = _a.nodeModel, graphModel = _a.graphModel, cancelCallback = _a.cancelCallback;
    var r = nodeModel.r, // circle
    rx = nodeModel.rx, // ellipse/diamond
    ry = nodeModel.ry, width = nodeModel.width, // rect/html
    height = nodeModel.height, PCTResizeInfo = nodeModel.PCTResizeInfo, minWidth = nodeModel.minWidth, minHeight = nodeModel.minHeight, maxWidth = nodeModel.maxWidth, maxHeight = nodeModel.maxHeight;
    var isFreezeWidth = minWidth === maxWidth;
    var isFreezeHeight = minHeight === maxHeight;
    var resizeInfo = {
        width: r || rx || width,
        height: r || ry || height,
        deltaX: deltaX,
        deltaY: deltaY,
        PCTResizeInfo: PCTResizeInfo,
    };
    var pct = r || (rx && ry) ? 1 / 2 : 1;
    var nextSize = (0, exports.recalcResizeInfo)(index, resizeInfo, pct, isFreezeWidth, isFreezeHeight);
    // 限制放大缩小的最大最小范围
    if (nextSize.width < minWidth ||
        nextSize.width > maxWidth ||
        nextSize.height < minHeight ||
        nextSize.height > maxHeight) {
        // this.dragHandler.cancelDrag()
        cancelCallback === null || cancelCallback === void 0 ? void 0 : cancelCallback();
        return;
    }
    // 如果限制了宽高不变，对应的 x/y 不产生位移
    nextSize.deltaX = isFreezeWidth ? 0 : nextSize.deltaX;
    nextSize.deltaY = isFreezeWidth ? 0 : nextSize.deltaY;
    var preNodeData = nodeModel.getData();
    var curNodeData = nodeModel.resize(nextSize);
    // 更新边
    (0, exports.updateEdgePointByAnchors)(nodeModel, graphModel);
    // 触发 resize 事件
    (0, exports.triggerResizeEvent)(preNodeData, curNodeData, deltaX, deltaY, index, nodeModel, graphModel);
};
exports.handleResize = handleResize;
