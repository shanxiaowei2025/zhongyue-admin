/**
 * Name: bundle-import
 * Version: 0.0.1
 * Author: CondorHero
 * Homepage: https://github.com/condorheroblog/bundle-import#readme
 * License MIT Â© 2023-Present
 */

import { importFromString, requireFromString, inferLoader, buildBundler } from 'import-from-string';
import { isAbsolute, dirname, extname, resolve, join, basename } from 'node:path';
import { promises, readFileSync } from 'node:fs';
import { pathToFileURL } from 'node:url';
import { getTsconfig } from 'get-tsconfig';

const JS_EXT_RE = /\.([mc]?[tj]s|[tj]sx)$/;

async function moduleFromString(code, options) {
  const isESM = options.format === "esm";
  if (isESM) {
    return await importFromString(code, {
      filename: options.filename,
      dirname: options.dirname,
      skipBuild: false
    });
  } else {
    return requireFromString(code, { filename: options.filename, dirname: options.dirname });
  }
}

var name = "bundle-import";
var version = "0.0.1";

function match(id, patterns) {
  if (!patterns)
    return false;
  return patterns.some((p) => {
    if (p instanceof RegExp) {
      return p.test(id);
    }
    return id === p || id.startsWith(p + "/");
  });
}
function externalPlugin({
  external,
  notExternal
} = {}) {
  return {
    name: `${name}:external`,
    setup(ctx) {
      ctx.onResolve({ filter: /.*/ }, async (args) => {
        if (args.path[0] === "." || isAbsolute(args.path)) {
          return;
        }
        if (match(args.path, external)) {
          return {
            external: true
          };
        }
        if (match(args.path, notExternal)) {
          return;
        }
        return {
          external: true
        };
      });
    }
  };
}

const DIRNAME_VAR_NAME = "__injected_dirname__";
const FILENAME_VAR_NAME = "__injected_filename__";
const IMPORT_META_URL_VAR_NAME = "__injected_import_meta_url__";
function injectFileScopePlugin() {
  return {
    name: `[${name}]:inject-file-scope`,
    setup(build) {
      build.initialOptions.define = {
        ...build.initialOptions.define,
        __dirname: DIRNAME_VAR_NAME,
        __filename: FILENAME_VAR_NAME,
        "import.meta.url": IMPORT_META_URL_VAR_NAME
      };
      build.onLoad({ filter: JS_EXT_RE }, async (args) => {
        const contents = await promises.readFile(args.path, "utf-8");
        const injectLines = [
          `const ${FILENAME_VAR_NAME} = ${JSON.stringify(args.path)};`,
          `const ${DIRNAME_VAR_NAME} = ${JSON.stringify(dirname(args.path))};`,
          `const ${IMPORT_META_URL_VAR_NAME} = ${JSON.stringify(pathToFileURL(args.path).href)};`
        ];
        return {
          contents: injectLines.join("") + contents,
          loader: inferLoader(extname(args.path))
        };
      });
    }
  };
}

const getPkgType = () => {
  try {
    const pkg = JSON.parse(readFileSync(resolve("package.json"), "utf-8"));
    return pkg.type;
  } catch (error) {
  }
};
function guessFormat(inputFile, type = getPkgType()) {
  const ext = extname(inputFile);
  if (ext === ".js") {
    return type === "module" ? "esm" : "cjs";
  } else if (ext === ".ts" || ext === ".mts" || ext === ".mjs") {
    return "esm";
  }
  return "cjs";
}
const tsconfigPathsToRegExp = (paths) => {
  return Object.keys(paths).map((key) => {
    return new RegExp(`^${key.replace(/\*/, ".*")}$`);
  });
};

function resolveOptions(options) {
  return {
    filepath: options.filepath,
    tsconfig: options.tsconfig ?? "tsconfig.json",
    external: options.external ?? [],
    cwd: options.cwd ?? process.cwd(),
    format: options.format ?? guessFormat(options.filepath),
    esbuildOptions: options.esbuildOptions
  };
}

function bundleImport(options) {
  return new Promise(async (resolve, reject) => {
    if (!JS_EXT_RE.test(options.filepath)) {
      throw new Error(`${options.filepath} is not a valid JS file`);
    }
    const resolved = resolveOptions(options);
    const tsconfig = getTsconfig(resolved.cwd, options.tsconfig) ?? getTsconfig(resolved.cwd, "jsconfig.json");
    try {
      const result = await buildBundler({
        entryPoints: [resolved.filepath],
        absWorkingDir: resolved.cwd,
        outfile: "out.js",
        format: resolved.format,
        platform: "node",
        bundle: true,
        metafile: true,
        write: false,
        ...resolved.esbuildOptions,
        plugins: [
          externalPlugin({
            external: resolved.external,
            notExternal: tsconfigPathsToRegExp(tsconfig?.config.compilerOptions?.paths ?? {})
          }),
          injectFileScopePlugin(),
          ...resolved.esbuildOptions?.plugins ?? []
        ]
      });
      if (result.outputFiles) {
        const absFilePath = join(resolved.cwd, resolved.filepath);
        const code = result.outputFiles[0].text;
        const mod = await moduleFromString(code, {
          format: resolved.format,
          dirname: dirname(absFilePath),
          filename: basename(absFilePath)
        });
        resolve({
          mod,
          dependencies: result.metafile?.inputs || {}
        });
      }
      resolve({
        mod: {},
        dependencies: {}
      });
    } catch (e) {
      reject(e);
    }
  });
}

export { JS_EXT_RE, bundleImport, getPkgType, guessFormat, moduleFromString, resolveOptions, tsconfigPathsToRegExp, version };
