import { BuildOptions } from 'import-from-string';

type BundleFormat = "cjs" | "esm";
interface BundleImportOptions {
    /**
     * Project root directory
     */
    cwd?: string;
    /**
     * The filepath to bundle and require
     */
    filepath: string;
    /**
     * External packages
     */
    external?: (string | RegExp)[];
    /**
     * A custom tsconfig path to read `paths` option
     */
    tsconfig?: string;
    /**
     * esbuild options
     *
     */
    esbuildOptions?: BuildOptions;
    /**
     * Provide bundle format explicitly
     * to skip the default format inference
     */
    format?: BundleFormat;
}
interface DependenciesType {
    [path: string]: {
        bytes: number;
        imports: {
            path: string;
            kind: "entry-point" | "import-statement" | "require-call" | "dynamic-import" | "require-resolve" | "import-rule" | "composes-from" | "url-token";
            external?: boolean;
            original?: string;
        }[];
        format?: "cjs" | "esm";
    };
}

declare function bundleImport<T = any>(options: BundleImportOptions): Promise<{
    mod: T;
    dependencies: DependenciesType;
}>;

declare const JS_EXT_RE: RegExp;

interface ModuleFromStringOptions {
    format: BundleFormat;
    dirname: string;
    filename: string;
}
declare function moduleFromString(code: string, options: ModuleFromStringOptions): Promise<any>;

declare function resolveOptions(options: BundleImportOptions): {
    filepath: string;
    tsconfig: string;
    external: (string | RegExp)[];
    cwd: string;
    format: BundleFormat;
    esbuildOptions: any;
};
type ResolveOptionsType = ReturnType<typeof resolveOptions>;

declare const getPkgType: () => string | undefined;
declare function guessFormat(inputFile: string, type?: string | undefined): "cjs" | "esm";
declare const tsconfigPathsToRegExp: (paths: Record<string, unknown>) => RegExp[];

var version = "0.0.1";

export { type BundleFormat, type BundleImportOptions, type DependenciesType, JS_EXT_RE, type ModuleFromStringOptions, type ResolveOptionsType, bundleImport, getPkgType, guessFormat, moduleFromString, resolveOptions, tsconfigPathsToRegExp, version };
