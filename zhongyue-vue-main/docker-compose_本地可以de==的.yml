version: '3'
services:
  frontend:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: zhongyue-admin
    ports:
      - "8080:8080"  # 确保端口映射正确
    environment:
      - NODE_ENV=development
      - VITE_PORT=8080  # 添加 Vite 端口环境变量
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]  # 修改健康检查端口
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s  # 给应用一个启动的缓冲时间
    # volumes:
    #   - ./dist:/app/dist  # 修改为相对路径
    volumes:
      - type: bind
        source: .
        target: /app
      - type: volume
        target: /app/node_modules












#    version: '3'
# services:
#   frontend:
#     build: 
#       context: .
#       dockerfile: Dockerfile
#     container_name: zhongyue-admin
#     ports:
#       - "8080:8080"
#     environment:
#       - NODE_ENV=production
#       - PORT=8080
#     restart: unless-stopped
#     healthcheck:
#       test: ["CMD", "curl", "-f", "http://localhost:8080"]
#       interval: 30s
#       timeout: 10s
#       retries: 3
#       start_period: 40s  # 给应用一个启动的缓冲时间 


# 使用 Node.js 20 Alpine 作为基础镜像
# FROM --platform=linux/amd64 node:20-alpine

# # 设置工作目录
# WORKDIR /app

# # 设置环境变量
# ENV NODE_ENV=production
# ENV PORT=8080

# # 安装 curl 用于健康检查
# RUN apk add --no-cache curl

# # 设置镜像加速和 pnpm
# RUN npm config set registry https://registry.npmmirror.com && \
#     npm install -g pnpm && \
#     pnpm config set registry https://registry.npmmirror.com

# # 复制 package.json
# COPY package.json ./

# # 安装依赖（使用正确的 pnpm 参数）
# RUN pnpm install --prefer-offline

# # 复制源代码
# COPY . .

# # 构建应用
# RUN pnpm build

# # 暴露端口
# EXPOSE 8080

# # 启动应用
# CMD ["pnpm", "preview", "--port", "8080", "--host", "0.0.0.0"]
